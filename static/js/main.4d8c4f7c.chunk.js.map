{"version":3,"sources":["Footer.js","Numerek.js","App.js","serviceWorker.js","index.js"],"names":["Footer","props","react_default","a","createElement","build","className","fa_index_esm","index_esm","Numerek","state","value","chosenOne","handleClick","_this","max","chosen","Math","floor","random","setState","_this2","this","align","justify","xs","sm","md","lg","xl","type","min","onChange","e","target","onClick","Component","App","src_Numerek","src_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kOAmBeA,EAfA,SAACC,GACZ,OACJC,EAAAC,EAAAC,cAACC,EAAA,IAAD,KACQH,EAAAC,EAAAC,cAAA,UAAQE,UAAU,cACdJ,EAAAC,EAAAC,cAAA,sBACaF,EAAAC,EAAAC,cAACG,EAAA,EAAD,MADb,WACuCL,EAAAC,EAAAC,cAACI,EAAA,EAAD,MADvC,2DCiCGC,6MApCXC,MAAM,CACFC,MAAO,EACPC,UAAW,KAGnBC,YAAc,WACd,GAAIC,EAAKJ,MAAMC,MAAQ,EAAE,CACrB,IACII,EAAMD,EAAKJ,MAAMC,MACjBK,EAASC,KAAKC,MAAMD,KAAKE,UAAYJ,EAF/B,EAE2C,IAF3C,EAGVD,EAAKM,SAAS,CACVR,UAAWI,8EAIN,IAAAK,EAAAC,KACL,OAGQpB,EAAAC,EAAAC,cAACC,EAAA,IAAD,CAAKkB,MAAM,SAASC,QAAQ,UACxBtB,EAAAC,EAAAC,cAACC,EAAA,IAAD,CAAKoB,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAC3D3B,EAAAC,EAAAC,cAAA,yCACAF,EAAAC,EAAAC,cAAA,SAAO0B,KAAK,SAASnB,MAAOW,KAAKZ,MAAMC,MAAOoB,IAAK,EAAGC,SAAU,SAACC,GACzDZ,EAAKD,SAAS,CAAET,MAAOsB,EAAEC,OAAOvB,WAFxC,eAKoBT,EAAAC,EAAAC,cAACC,EAAA,IAAD,CAAKoB,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GACjC3B,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UACnCJ,EAAAC,EAAAC,cAAA,UAAQ+B,QAASb,KAAKT,aAAtB,WACiBS,KAAKZ,MAAME,UAAYV,EAAAC,EAAAC,cAACC,EAAA,IAAD,CAAKoB,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAG3B,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UAAUgB,KAAKZ,MAAME,YAAyB,aA9B5HwB,aCaPC,EATH,WACR,OACAnC,EAAAC,EAAAC,cAACC,EAAA,UAAD,CAAWC,UAAU,OACvBJ,EAAAC,EAAAC,cAACkC,EAAD,MACApC,EAAAC,EAAAC,cAACmC,EAAD,QCAkBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4d8c4f7c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { GiDiceEightFacesEight } from 'react-icons/gi';\r\nimport { FaRegCopyright } from \"react-icons/fa\";\r\nimport { Row } from 'react-grid-system';\r\nconst Footer = (props) => {\r\n    return (\r\n<Row>\r\n        <footer className=\"App-footer\">\r\n            <p>\r\n               Copyright <FaRegCopyright /> Anna   <GiDiceEightFacesEight />   Wróbel\r\n    \r\n            </p>\r\n        </footer>\r\n</Row>\r\n    )\r\n};\r\n\r\n\r\n\r\nexport default Footer;\r\n","import React, { Component} from \"react\";\r\nimport './App.css';\r\nimport { Row, Col } from 'react-grid-system';\r\n\r\nclass Numerek extends Component {\r\n    state={\r\n        value: 0,\r\n        chosenOne: 0,\r\n    }\r\n\r\nhandleClick = () => {\r\nif (this.state.value > 0){\r\n    let min = 1;\r\n    let max = this.state.value;\r\n    let chosen = Math.floor(Math.random() * (max - min + 1)) + min;\r\n    this.setState({\r\n        chosenOne: chosen\r\n    })\r\n}\r\n    }\r\n    render() {\r\n        return(\r\n\r\n  \r\n                <Row align=\"center\" justify=\"center\" >\r\n                    <Col xs={12} sm={9} md={10} lg={6} xl={6}>           \r\n<label>Wybieramy spośród  \r\n<input type=\"number\" value={this.state.value} min={0} onChange={(e)=> {\r\n        this.setState({ value: e.target.value})\r\n    }}/>  osób.</label>\r\n</Col>\r\n                    <Col xs={4} sm={3} md={2} lg={2} xl={2}>\r\n                        <div className=\"button\">\r\n    <button onClick={this.handleClick}>Losuj</button></div></Col>\r\n                    {this.state.chosenOne ? <Col xs={12} sm={4} md={6} lg={6} xl={6}><div className=\"ofiara\">{this.state.chosenOne}</div></Col> : null}\r\n</Row>\r\n\r\n        )\r\n\r\n    }\r\n}\r\nexport default Numerek;","import React from \"react\";\nimport './App.css';\nimport Footer from './Footer'\n\nimport Numerek from './Numerek'\nimport { Container } from 'react-grid-system';\n\n\nconst App = () => {\n    return (\n    <Container className=\"App\"> \n  <Numerek />\n  <Footer />\n    </Container>\n  );\n\n    }\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}